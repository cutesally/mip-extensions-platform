/**
 * @file search-video MIP版
 * @author 邹红全<zouhongquan@baidu.com>
 * @version 1.0
 * @copyright 2018 Baidu.com, Inc. All Rights Reserved
 */
define(function (require) {
    var Webb2 = require('./webb2.min');
    var md5 = require('./md5.min');
    var util = require('util');
    var platform = util.platform;
    var videoLog = {
        status: {
            init: false,
            waiting: false
        },
        time: {
            play: 0,
            /*loadstart的时机(video提供的事件回调)*/
            loadstart: 0,
            /*loadmetadata的时机(video提供的事件回调)*/
            loadedmetadata: 0,
            /*loadeddata的时机(video提供的事件回调)*/
            loadeddata: 0,
            currentTime: 0
        },
        expand: {
            /*加载播放器到dns解析完的时长*/
            loadplayer_2_dns: 0,
            /*dns解析完到建连完毕的时长*/
            dns_2_connect: 0,
            /*建连完毕到loadstart的时长*/
            loadplayer_2_loadstart: 0,
            /*loadstart到loadmetadata的时长*/
            loadstart_2_loadmetadata: 0,
            /*loadmetadata到loadeddata的时长*/
            loadmetadata_2_loadeddata: 0,
            /*loadeddata到playing的时长*/
            loadeddata_2_playing: 0,
            /*点击到playing的时长*/
            loadplayer_2_playing: 0
        },
        network: 'unknown',
        getNetworkType: 'baiduboxapp://v19/utils/getNetworkType?callback=videoPageGetNetworkType',
        ua: platform,
        sectionNum: 10
    };

    var log = {
        init: function () {
            var lid = md5(location.href + (+new Date()) + Math.random());
            this.webb2 = new Webb2({
                pid: '1_5',
                lid: lid,
                /* eslint-disable fecs-camelcase */
                pf_comm: {
                    sample: 1
                },
                et_comm: {
                    sample: 1
                }
                /* eslint-enable fecs-camelcase */
            });
        },

        /**
         * Bind log event
         * @param {Element} videoEl <video> element
         */
        bind: function (videoEl) {
            var self = this;
            self.init();
	        /*self.getNetwork();*/
    	    window.videoPageGetNetworkType = function (data) {
    		    var data = JSON.parse(data);
    		    if (data && !parseInt(data.status, 10) && data.data) {
    			    videoLog.network = data.data.networkType;
    		    }
    	    };

            var autoplay = videoEl.getAttribute('autoplay');
            if (autoplay) {
                videoLog.time.play = +new Date();
            }
            var urlData = {
                url: location.href,
                videoSrc: videoEl.src
            };
            // Play times & Start time
            videoEl.addEventListener('play', function () {
                if (!videoLog.status.init) {
                    videoLog.time.play = +new Date();
                }
            });
	        videoEl.addEventListener('loadstart', function() {
        	   videoLog.time.loadstart = +new Date();
            });
            videoEl.addEventListener('loadedmetadata', function() {
        	   videoLog.time.loadedmetadata = +new Date();
            });
            videoEl.addEventListener('loadeddata', function() {
        	   videoLog.time.loadeddata = +new Date();
            });
            videoEl.addEventListener('playing', function () {
                var playingTime = +new Date();
                // iOS playing event is true playing
                if (!videoLog.status.init && platform.isIos()) {
		            self.getPlayTime(urlData);
                }
            });
            var sectionArr = new Array(videoLog.sectionNum);
            videoEl.addEventListener('timeupdate', function () {
                // Hack Android playing event
                if (!videoLog.status.init && platform.isAndroid() && videoEl.currentTime !== 0) {
		            self.getPlayTime(urlData);
                }
                // If duration > 10s send Played time & Play completion ratio log
                if (videoEl.duration > 10) {
                    for (var i = 0; i < sectionArr.length; i++) {
                        if (typeof sectionArr[i] === 'undefined'
                        && ((videoEl.currentTime / videoEl.duration) >= (i / sectionArr.length))) {
                            sectionArr[i] = 1;
                            // Data of 0% is replace by play times
                            if (i !== 0) {
                                var data = {
                                    currentTime: videoEl.currentTime,
                                    cent: (i / videoLog.sectionNum) * 100 + '%'
                                };
                                Object.assign(data, urlData);
                                self.sendLog('section', data);
                            }
                        }
                    }
                }
            });
            // Play end statistics separately
            videoEl.addEventListener('ended', function () {
                var data = {
                    currentTime: videoEl.currentTime,
                    cent: '100%'
                };
                self.sendLog('section', data);
            });
        },
        /**
         * Send log function
         * @param {string} type event type
         * @param {Object} data the record data object
         */
        sendLog: function (type, data) {
            var self = this;
            var time = '';
            switch (type) {
                case 'play':
		            let expand = videoLog.expand;
        		    // Send log when first time start play
        		    self.webb2.sendPfLog(
                    //info
				    {
                        loadplayer_2_dns: expand.loadplayer_2_dns,
                        dns_2_connect: expand.dns_2_connect,
                        connect_2_loadstart: expand.connect_2_loadstart,
                        loadplayer_2_loadstart: expand.loadplayer_2_loadstart,
                        loadstart_2_loadmetadata: expand.loadstart_2_loadmetadata,
                        loadmetadata_2_loadeddata: expand.loadmetadata_2_loadeddata,
                        loadeddata_playing: expand.loadeddata_playing,
                        loadplayer_2_playing: expand.loadplayer_2_playing
                    },
                    //dim
                    {
                        net: videoLog.network,
                        type: 'thirdparty'
                    },
                    //ext
                    {
                        ext: {
                            videoSrc: data.videoSrc
                         }
                    });
                    break;
                case 'section':
                    self.webb2.send('pf_comm', {
                        cent: data.cent,
                        currentTime: data.currentTime,
                        url: data.url,
                        videoSrc: data.videoSrc
                    }, function () {}, {
                        group: 'searchVideo-mip'
                    });
                    break;
            }
        }
    };
    return log;
});
